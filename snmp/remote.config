// Docs https://grafana.com/docs/alloy/latest/reference/components/prometheus/prometheus.exporter.snmp/

prometheus.exporter.snmp "integrations_snmp" {
	config_merge_strategy = "merge"
	config                = `
auths:
  myCommunity:
    community: ` + sys.env("SNMPCOMMUNITY") + `
    security_level: noAuthNoPriv
    auth_protocol: MD5
    priv_protocol: DES
    version: 2
`

	target "network_switch_1" {
		address = "172.31.16.119"
		module  = "if_mib,system"
		auth    = "myCommunity"
	}

  targets = [
    {
      "name"        = "network_switch_1",
      "address"     = "192.168.1.2",
      "module"      = "system,if_mib",
      "walk_params" = "public",
      "env"         = "prod",
      "auth"        = "myCommunity",
    },
    {
      "name"        = "network_switch_2",
      "address"     = "192.168.1.2",
      "module"      = "system,if_mib",
      "env"         = "prod",
      "auth"        = "myCommunity",
    },
  ]
  
  walk_param "private" {
    retries = "2"
  }
}

discovery.relabel "integrations_snmp" {
	targets = prometheus.exporter.snmp.integrations_snmp.targets

	rule {
		source_labels = ["job"]
		regex         = "(^.*snmp)\\/(.*)"
		target_label  = "job_snmp"
	}

	rule {
		source_labels = ["job"]
		regex         = "(^.*snmp)\\/(.*)"
		target_label  = "snmp_target"
		replacement   = "$2"
	}
}

prometheus.relabel "integrations_snmp" {
	forward_to = [prometheus.remote_write.metrics_service.receiver]

	rule {
		source_labels = ["__name__"]
		regex         = "asserts:mixin_workload_job|ifHCInOctets|ifHCOutOctets|ifHighSpeed|ifInErrors|ifMtu|ifOperStatus|ifOutErrors|ifPhysAddress|ifType_info|snmp_scrape_duration_seconds|sysUpTime|up"
		action        = "keep"
	}
}

prometheus.scrape "integrations_snmp" {
	targets    = discovery.relabel.integrations_snmp.output
	forward_to = [prometheus.relabel.integrations_snmp.receiver]
	job_name   = "integrations/snmp"
}

prometheus.remote_write "metrics_service" {
	endpoint {
		url = sys.env("GCLOUD_METRIC_URL")

		basic_auth {
			username = sys.env("GCLOUD_METRIC_USER")
			password = sys.env("GCLOUD_METRIC_PASS")
		}
	}
}
