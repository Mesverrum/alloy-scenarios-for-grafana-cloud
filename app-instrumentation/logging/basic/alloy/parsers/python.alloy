// Python log parser module
declare "python" {
  stage.match {
    pipeline_name = "python"
    selector = "{service_name=\"python\"}"
    
    // Extract the timestamp, file, line number, level, and message from the log line.
    stage.regex {
      expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3}) - (?P<file>[^:]+):(?P<line_num>\\d+) - (?P<level>[^ ]+) - (?P<msg>.*)"
    }
    
    // Set the file and level as labels.
    stage.labels {
      values = {
        file = "",
        level = "",
      }
    }

    // Set the timestamp to the timestamp extracted from the log line.
    stage.timestamp {
      source = "time"
      format = "2025-06-17 09:54:15,283"
    }

    // Set the line number as structured metadata in loki (non-indexed)
    stage.structured_metadata {
      values = {
        line_num = "",
      }
    }

    // We want to maintain a similar format to the original log line so we use template to create a new
    // temporary variable called output.
    stage.template {
      source = "output"
      template = "{{.file}} - {{.line_num}} - {{.level}} - {{.msg}}"
    }

    // We use the new output variable to create a new log body. This is the log line that will be sent to loki.
    stage.output {
      source = "output"
    }
  }
} 