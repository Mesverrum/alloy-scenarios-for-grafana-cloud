// JavaScript/Node.js log parser module
declare "javascript" {
  stage.match {
    pipeline_name = "javascript"
    selector = "{service_name=\"javascript\"}"
    
    // Extract the timestamp, file, line number, level, and message from the log line.
    stage.json {
      expressions = {
        level_num      = "level",
        time       = "time",
        pid        = "pid",
        hostname   = "hostname",
        msg        = "msg",
        obj        = "obj",
        counter    = "counter",
        component  = "component",
        query      = "query",
        duration   = "duration",
        version    = "version",
        method     = "method",
        path       = "path",
        status     = "status",
        nested_obj        = "nested.obj",
        nested_timestamp  = "nested.timestamp",
        err_type          = "err.type",
        err_message       = "err.message",
        err_stack         = "err.stack",
      }
    }

    stage.template {
      source   = "level"
      template = "{{- if eq .level_num \"10\" -}}trace{{- else if eq .level_num \"20\" -}}debug{{- else if eq .level_num \"30\" -}}info{{- else if eq .level_num \"40\" -}}warn{{- else if eq .level_num \"50\" -}}error{{- else if eq .level_num \"60\" -}}fatal{{- else -}}unknown{{- end -}}"
    }
    
    // Set the file and level as labels.
    stage.labels {
      values = {
        file = "",
        hostname = "",
        component = "",
        level = "",
      }
    }

    // Set the timestamp to the timestamp extracted from the log line.
    stage.timestamp {
      source = "time"
      format = "UnixMs"
    }

    // Set the line number as structured metadata in loki (non-indexed)
    stage.structured_metadata {
      values = {
        level_num  = "",
        pid        = "",
        query      = "",
        duration   = "",
        version    = "",
        method     = "",
        path       = "",
        status     = "",
        nested_obj = "",
        nested_timestamp = "",
        err_type   = "",
        err_message = "",
        err_stack  = "",
      }
    }
    
    // We want to maintain a similar format to the original log line so we use template to create a new
    // temporary variable called output.
    stage.template {
      source   = "output"
      template = "{{.hostname}} - {{.level}} - {{ if .err_message }}{{ .err_message }}{{ else }}{{ .msg }}{{ end }}"
    }
    
    // We use the new output variable to create a new log body. This is the log line that will be sent to loki.
    stage.output {
      source = "output"
    }
  }
} 