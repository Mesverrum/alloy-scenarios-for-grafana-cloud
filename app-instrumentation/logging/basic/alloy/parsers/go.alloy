// Go/Zap log parser module
declare "go" {
  stage.match {
    pipeline_name = "go"
    selector = "{service_name=\"go\"}"
    
    // Extract the timestamp, file, line number, level, and message from the log line.
    stage.json {
      expressions = {
        level            = "level",
        ts               = "ts",
        logger           = "logger",
        caller           = "caller",
        msg              = "msg",
        answer           = "answer",
        obj              = "obj",
        counter          = "counter",
        feature          = "feature",
        query            = "query",
        duration         = "duration",
        method           = "method",
        path             = "path",
        status           = "status",
        requestId        = "requestId",
        context1         = "context1",
        context2         = "context2",
        error            = "error",
        stacktrace       = "stacktrace",
        nested_obj       = "nested.obj",
        nested_timestamp = "nested.timestamp",
      }
    }
    
    stage.labels {
      values = {
        logger = "",
        level = "",
      }
    }

    // Set the timestamp to the timestamp extracted from the log line.
    stage.timestamp {
      source = "ts"
      format = "1750342991.0445938"
    }

    // Set the line number as structured metadata in loki (non-indexed)
    stage.structured_metadata {
      values = {
        caller           = "caller",
        answer           = "answer",
        obj              = "obj",
        counter          = "counter",
        feature          = "feature",
        query            = "query",
        duration         = "duration",
        method           = "method",
        path             = "path",
        status           = "status",
        requestId        = "requestId",
        context1         = "context1",
        context2         = "context2",
        error            = "error",
        stacktrace       = "stacktrace",
        nested_obj       = "nested.obj",
        nested_timestamp = "nested.timestamp",
      }
    }

    // We want to maintain a similar format to the original log line so we use template to create a new
    // temporary variable called output.
    stage.template {
      source   = "output"
      template = "{{.logger}} - {{.level}} - {{.msg}}"
    }
    
    // We use the new output variable to create a new log body. This is the log line that will be sent to loki.
    stage.output {
      source = "output"
    }
  }
} 